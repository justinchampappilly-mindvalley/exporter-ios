// This file is automatically generated with SuperNova Custom Exporter and should not be edited
// Generated on {{ getCurrentDate() }}

import UIKit

public extension UIColor {

    private static func isDark(_ traitCollection: UITraitCollection) -> Bool {
        return traitCollection.userInterfaceStyle == .dark
    }
{* Polulate the color map with all variants of colors *}
{[ const brand = ds.currentBrand() /]}
{[ const themesData = ds.allThemes(brand.id) /]}
{[ const colorTokensTree = ds.tokenGroupTreeByType("Color", brand.id) /]}
{{ groupTokensByName(themesData); }}
{* Generete light and dark colors as static computed variables *}
{[ const groupedTokenData = getColorMap() /]}
{[ const colorNames = groupedTokenData.keys() /]}
{[ for colorName in colorNames ]}
    {[ if isColorAllowed(colorName) ]}
        {[ if isColorStylesToken(colorName) ]}
            {[ let lightColor = getColorsFor(colorName, "Light") /]}
            {[ let darkColor = getColorsFor(colorName, "Dark") /]}
            {[ if isColorThemed(colorName) ]}
    static let {[ inject "token_name" context lightColor /]} = UIColor { (traitCollection: UITraitCollection) -> UIColor in
        return isDark(traitCollection) ? {[ inject "conditional_color_name" context darkColor /]} : {[ inject "conditional_color_name" context lightColor /]}

    }
    
            {[ else ]}
                {[ if lightColor ]}
    static var {[ inject "token_name" context lightColor /]} : UIColor { 
        {[ inject "color" context lightColor.color /]}

    }
                {[ else ]}  
    static var {[ inject "token_name" context darkColor /]} : UIColor { 
        {[ inject "color" context darkColor.color /]}

    }
                {[/]}    
            {[/]}
        {[/]}
    {[/]}
{[/]}
}

// This extension is used for SwiftUI previews used to visially test the colors

public extension UIColor {
    var colorName: String {
        switch self {
{[ for colorName in colorNames ]}
    {[ let lightColor = getColorsFor(colorName, "Light") /]}
    {[ let darkColor = getColorsFor(colorName, "Dark") /]}
        {[ if lightColor ]}
            case .{[ inject "token_name" context lightColor /]}:
                return "{[ inject "token_name" context lightColor /]}"
            {[ else ]}
            case .{[ inject "token_name" context darkColor /]}:
                return "{[ inject "token_name" context darkColor /]}"
        {[/]}
{[/]}
        }
    }
}

// This extension is used for SwiftUI previews used to visially test the colors

public extension UIColor {
    static var allColors: [Color] {
        return [
{[ for colorName in colorNames ]}
    {[ let lightColor = getColorsFor(colorName, "Light") /]}
    {[ let darkColor = getColorsFor(colorName, "Dark") /]}
        {[ if lightColor ]}
            .{[ inject "token_name" context lightColor /]},
            {[ else ]}
            .{[ inject "token_name" context darkColor /]},
        {[/]}
{[/]}
        ]
    }
}
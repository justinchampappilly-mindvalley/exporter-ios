import UIKit

public extension UIColor {
   
    private static func isDark(_ traitCollection: UITraitCollection) -> Bool {
        return traitCollection.userInterfaceStyle == .dark
    }
{* Polulate the color map with all variants of colors *}
{[ const brand = ds.currentBrand() /]}
{[ const colorTokensTree = ds.tokenGroupTreeByType("Color", brand.id) /]}
{[ traverse colorTokensTree property subgroups into colorTokenGroup ]}
    {[ let fullTokenGroupPath = createFullTokenGroupPath(colorTokenGroup) /]}
    {[ const colorTokenInGroups = ds.tokensByGroupId(colorTokenGroup.id) /]}
    {{ groupTokensByName(colorTokenInGroups, fullTokenGroupPath) }}
{[/]}
{* Generete light and dark colors as static computed variables *}
{[ traverse colorTokensTree property subgroups into colorTokenGroup ]}
    {[ const colorTokenInGroups = ds.tokensByGroupId(colorTokenGroup.id) /]}
    {[ for colorToken in colorTokenInGroups ]}
    {[if isColorStylesToken(colorToken) ]}
    {[ let lightColor = getColorsFor(colorToken.name, "LightUI") /]}
    {[ let darkColor = getColorsFor(colorToken.name, "DarkUI") /]}
    {[ if (colorToken.description && colorToken.description.count() !== 0) ]}
    {{ createDocumentationComment(colorToken.description, "    ") }}
    {[/]}

    static let {[ inject "token_name" context colorToken /]} = UIColor { (traitCollection: UITraitCollection) -> UIColor in
        return isDark(traitCollection) ? {[ inject "color" context darkColor.color /]} : {[ inject "color" context lightColor.color /]}

    }

{[/]} 
{[/]}  
{[/]}
}
import UIKit

public extension UIColor {
   
    private static func isDark(_ traitCollection: UITraitCollection) -> Bool {
        return traitCollection.userInterfaceStyle == .dark
    }
{* Polulate the color map with all variants of colors *}
{[ const brand = ds.currentBrand() /]}
{[ const themesData = ds.allThemes(brand.id) /]}
{[ const colorTokensTree = ds.tokenGroupTreeByType("Color", brand.id) /]}
{{ groupTokensByName(themesData); }}
{* Generete light and dark colors as static computed variables *}
{[ traverse colorTokensTree property subgroups into colorTokenGroup ]}
{[ const colorTokenInGroups = ds.tokensByGroupId(colorTokenGroup.id) /]}
{[ for colorToken in colorTokenInGroups ]}
{[if isColorStylesToken(colorToken) ]}
{[if isColorThemed(colorToken.name) ]}
{[ let lightColor = getColorsFor(colorToken.name, "Light") /]}
{[ let darkColor = getColorsFor(colorToken.name, "Dark") /]}
{[ inject "documentation" context colorToken/]}

    static let {[ inject "token_name" context colorToken /]} = UIColor { (traitCollection: UITraitCollection) -> UIColor in
        return isDark(traitCollection) ? {[ inject "conditional_color_name" context darkColor /]} : {[ inject "conditional_color_name" context lightColor /]}

    }
{[ else ]}
{[ let lightColor = getColorsFor(colorToken.name, "LightUI") /]}

{[ inject "documentation" context colorToken/]}

    static var {[ inject "token_name" context colorToken /]} : UIColor { 
         {[ inject "color" context lightColor.color /]}
        
    }
{[/]}   
{[/]} 
{[/]}  
{[/]}
}